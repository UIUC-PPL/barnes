mainmodule barnes {
  
  readonly CProxy_TreePiece treePieceProxy;
  readonly CProxy_DataManager dataManagerProxy;
  readonly CProxy_Main mainProxy;
  readonly Parameters globalParams;

  initproc void registerReducers();

  class Parameters;
  class MultipoleMoments;

  message ParticleMsg {
    Particle part[];
  };

  message RangeMsg {
    Key keys[];
  };

  message RequestMsg;
  message ParticleReplyMsg {
    ExternalParticle data[];
  };

  message NodeReplyMsg {
    Node<ForceData> data[];
  };

  message RescheduleMsg;

  include "Descriptor.h";

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [threaded] void commence();
    entry void niceExit();
    entry void quiescence();
    entry void quiescenceExit();
  };

  array[1D] TreePiece {
    entry TreePiece();
    entry void receiveParticles(ParticleMsg *msg);
    entry void receiveParticles();
    entry void requestMoments(Key k, int replyTo);

    entry void startTraversal();
    //entry void doLocalGravity();
    //entry void doRemoteGravity();
    entry void doLocalGravity(RescheduleMsg *);
    entry void doRemoteGravity(RescheduleMsg *);

    entry void requestParticles(RequestMsg *msg);
    entry void requestNode(RequestMsg *msg);
    entry void quiescence();
  };

  include "Node.h";

  group DataManager {
    entry DataManager();
    entry void loadParticles(CkCallback &cb);
    entry void decompose(BoundingBox &universe);
    entry void receiveHistogram(CkReductionMsg *msg);
    entry void receiveSplitters(CkVec<int> splitBins);
    entry void sendParticles(RangeMsg *msg);
    entry [expedited] void receiveMoments(MomentsExchangeStruct moments);

    entry void recvParticles(ParticleReplyMsg *msg);
    entry void recvNode(NodeReplyMsg *msg);
    entry void advance(CkReductionMsg *msg);
    entry void traversalsDone(CmiUInt8 pnInter, CmiUInt8 ppInter, CmiUInt8 openCrit);

    entry void recvUnivBoundingBox(CkReductionMsg *msg);

    entry void quiescence();
  };
};
